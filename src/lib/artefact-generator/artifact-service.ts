// genshin-db supprim√© - utilisation uniquement de la base de donn√©es
import { prisma } from "../prisma";
import {
  getCachedArtifactSets,
  getCachedArtifactSetDetails,
  saveArtifactSets,
  isCacheValid,
  updateCacheMetadata,
  initializeDefaultData,
  CACHE_KEYS,
  type ArtifactSetData,
} from "./artifact-cache";

// Sets d'artefacts par d√©faut (fallback)
const DEFAULT_ARTIFACT_SETS = [
  "Gladiator's Finale",
  "Wanderer's Troupe",
  "Noblesse Oblige",
  "Bloodstained Chivalry",
  "Viridescent Venerer",
  "Crimson Witch of Flames",
  "Thundering Fury",
  "Blizzard Strayer",
  "Heart of Depth",
  "Pale Flame",
  "Tenacity of the Millelith",
  "Shimenawa's Reminiscence",
  "Emblem of Severed Fate",
  "Husk of Opulent Dreams",
  "Ocean-Hued Clam",
  "Vermillion Hereafter",
  "Echoes of an Offering",
  "Deepwood Memories",
  "Gilded Dreams",
  "Desert Pavilion Chronicle",
  "Flower of Paradise Lost",
  "Nymph's Dream",
  "Vourukasha's Glow",
  "Marechaussee Hunter",
  "Golden Troupe",
  "Song of Days Past",
  "Nighttime Whispers in the Echoing Woods",
  "Fragment of Harmonic Whimsy",
  "Unfinished Reverie",
  "Deathly Statuette",
];

/**
 * R√©cup√®re les sets d'artefacts depuis la base de donn√©es
 * (genshin-db n'est plus utilis√© - donn√©es extraites via le script)
 */
async function fetchArtifactSetsFromDatabase(): Promise<ArtifactSetData[]> {
  try {
    const artifactSets = await prisma.artifactSet.findMany({
      orderBy: { name: "asc" },
    });

    return artifactSets.map((set) => ({
      name: set.name,
      description: set.description || undefined,
      images: set.images
        ? {
            flower: set.images.flower || undefined,
            plume: set.images.plume || undefined,
            sands: set.images.sands || undefined,
            goblet: set.images.goblet || undefined,
            circlet: set.images.circlet || undefined,
          }
        : undefined,
    }));
  } catch (error) {
    console.warn(
      "Erreur lors de la r√©cup√©ration des sets depuis la base de donn√©es:",
      error
    );
    throw error;
  }
}

/**
 * R√©cup√®re les sets d'artefacts disponibles (cache + API si n√©cessaire)
 */
export async function getAvailableArtifactSets(): Promise<string[]> {
  try {
    // 1. D'abord, essayer de r√©cup√©rer depuis le cache (m√™me expir√©)
    const cachedSets = await getCachedArtifactSets();
    if (cachedSets.length > 0) {
      console.log(`R√©cup√©ration de ${cachedSets.length} sets depuis le cache`);
      return cachedSets;
    }

    // 2. Si pas en cache, r√©cup√©rer depuis la base de donn√©es
    console.log(
      "Aucun set en cache, r√©cup√©ration depuis la base de donn√©es..."
    );
    try {
      const dbSets = await fetchArtifactSetsFromDatabase();

      if (dbSets.length > 0) {
        // Sauvegarder en cache
        await saveArtifactSets(dbSets);
        await updateCacheMetadata(CACHE_KEYS.ARTIFACT_SETS, "1.0");

        console.log(`${dbSets.length} sets sauvegard√©s en cache`);
        return dbSets.map((set) => set.name);
      }
    } catch (dbError) {
      console.warn(
        "Erreur base de donn√©es, utilisation des sets par d√©faut:",
        dbError
      );
    }

    // 3. Dernier recours : sets par d√©faut
    console.log("Utilisation des sets par d√©faut");
    return DEFAULT_ARTIFACT_SETS;
  } catch (error) {
    console.warn("Erreur lors de la r√©cup√©ration des sets d'artefacts:", error);
    return DEFAULT_ARTIFACT_SETS;
  }
}

/**
 * R√©cup√®re les d√©tails d'un set d'artefacts (cache + API si n√©cessaire)
 */
export async function getArtifactSetDetails(setName: string): Promise<any> {
  try {
    // 1. D'abord, essayer de r√©cup√©rer depuis le cache (m√™me expir√©)
    const cachedDetails = await getCachedArtifactSetDetails(setName);
    if (cachedDetails) {
      console.log(`Set ${setName} trouv√© en cache`);
      return cachedDetails;
    }

    // 2. Si pas en cache, r√©cup√©rer depuis la base de donn√©es
    console.log(
      `Set ${setName} non trouv√© en cache, r√©cup√©ration depuis la base de donn√©es...`
    );
    try {
      const dbDetails = await prisma.artifactSet.findUnique({
        where: { name: setName },
      });

      if (dbDetails) {
        console.log(`üìä D√©tails trouv√©s en base pour ${setName}:`, {
          name: dbDetails.name,
          description: dbDetails.description,
          images: dbDetails.images,
        });

        // Sauvegarder en cache pour la prochaine fois
        const artifactSetData: ArtifactSetData = {
          name: setName,
          description: dbDetails.description || undefined,
          images: dbDetails.images
            ? {
                flower: dbDetails.images.flower || undefined,
                plume: dbDetails.images.plume || undefined,
                sands: dbDetails.images.sands || undefined,
                goblet: dbDetails.images.goblet || undefined,
                circlet: dbDetails.images.circlet || undefined,
              }
            : undefined,
        };

        await saveArtifactSets([artifactSetData]);
        await updateCacheMetadata(CACHE_KEYS.ARTIFACT_SETS, "1.0");

        console.log(`Set ${setName} sauvegard√© en cache`);
        return dbDetails;
      }
    } catch (dbError) {
      console.warn(`Erreur base de donn√©es pour le set ${setName}:`, dbError);
    }

    // 3. Fallback avec des donn√©es par d√©faut si la base de donn√©es est vide
    console.log(`Cr√©ation de donn√©es de fallback pour le set ${setName}`);
    const fallbackData = {
      name: setName,
      description: `Set d'artefacts ${setName}`,
      images: {
        flower: `https://via.placeholder.com/64x64/4A90E2/FFFFFF?text=üå∏`,
        plume: `https://via.placeholder.com/64x64/4A90E2/FFFFFF?text=ü™∂`,
        sands: `https://via.placeholder.com/64x64/4A90E2/FFFFFF?text=‚è≥`,
        goblet: `https://via.placeholder.com/64x64/4A90E2/FFFFFF?text=üè∫`,
        circlet: `https://via.placeholder.com/64x64/4A90E2/FFFFFF?text=üëë`,
      },
    };

    // Essayer de sauvegarder en base de donn√©es pour la prochaine fois
    try {
      await prisma.artifactSet.upsert({
        where: { name: setName },
        update: {
          description: fallbackData.description,
          images: fallbackData.images,
          updatedAt: new Date(),
        },
        create: {
          name: setName,
          description: fallbackData.description,
          images: fallbackData.images,
        },
      });
      console.log(`Set ${setName} sauvegard√© en base avec donn√©es de fallback`);
    } catch (saveError) {
      console.warn(
        `Erreur lors de la sauvegarde du fallback pour ${setName}:`,
        saveError
      );
    }

    return fallbackData;
  } catch (error) {
    console.warn(
      `Erreur lors de la r√©cup√©ration des d√©tails du set ${setName}:`,
      error
    );
    return null;
  }
}

/**
 * Force la mise √† jour du cache depuis la base de donn√©es
 */
export async function refreshArtifactCache(): Promise<{
  success: boolean;
  count: number;
  error?: string;
}> {
  try {
    console.log("Mise √† jour forc√©e du cache des artefacts...");

    const dbSets = await fetchArtifactSetsFromDatabase();

    if (dbSets.length > 0) {
      await saveArtifactSets(dbSets);
      await updateCacheMetadata(CACHE_KEYS.ARTIFACT_SETS, "1.0");

      console.log(`Cache mis √† jour avec ${dbSets.length} sets`);
      return { success: true, count: dbSets.length };
    }

    return {
      success: false,
      count: 0,
      error: "Aucun set r√©cup√©r√© depuis la base de donn√©es",
    };
  } catch (error) {
    console.warn("Erreur lors de la mise √† jour du cache:", error);
    return {
      success: false,
      count: 0,
      error: error instanceof Error ? error.message : "Erreur inconnue",
    };
  }
}

/**
 * Initialise le service (√† appeler au d√©marrage de l'application)
 */
export async function initializeArtifactService(): Promise<void> {
  try {
    console.log("Initialisation du service d'artefacts...");

    // Initialiser les donn√©es par d√©faut
    await initializeDefaultData();

    // V√©rifier si on a besoin de r√©cup√©rer les donn√©es depuis la base de donn√©es
    const cacheValid = await isCacheValid(CACHE_KEYS.ARTIFACT_SETS);

    if (!cacheValid) {
      console.log(
        "Cache invalide, r√©cup√©ration initiale depuis la base de donn√©es..."
      );
      await refreshArtifactCache();
    } else {
      console.log("Cache valide, utilisation des donn√©es en cache");
    }

    console.log("Service d'artefacts initialis√© avec succ√®s");
  } catch (error) {
    console.warn(
      "Erreur lors de l'initialisation du service d'artefacts:",
      error
    );
  }
}

/**
 * Obtient les statistiques du cache
 */
export async function getCacheStats(): Promise<{
  artifactSetsCount: number;
  cacheValid: boolean;
  lastUpdated?: Date;
}> {
  try {
    const sets = await getCachedArtifactSets();
    const cacheValid = await isCacheValid(CACHE_KEYS.ARTIFACT_SETS);

    // R√©cup√©rer la date de derni√®re mise √† jour
    const metadata = await prisma.cacheMetadata.findUnique({
      where: { key: CACHE_KEYS.ARTIFACT_SETS },
    });

    return {
      artifactSetsCount: sets.length,
      cacheValid,
      lastUpdated: metadata?.lastUpdated,
    };
  } catch (error) {
    console.warn(
      "Erreur lors de la r√©cup√©ration des statistiques du cache:",
      error
    );
    return {
      artifactSetsCount: 0,
      cacheValid: false,
    };
  }
}
