#!/usr/bin/env node

/**
 * Script de test pour v√©rifier le basculement entre SQLite et PostgreSQL
 */

const fs = require('fs');
const path = require('path');

const prismaDir = path.join(__dirname, '..', 'prisma');
const schemaFile = path.join(prismaDir, 'schema.prisma');

function testDatabaseSwitch() {
    console.log('üß™ Test du basculement de base de donn√©es...\n');

    // Test 1: V√©rifier que les fichiers de sch√©ma existent
    console.log('1Ô∏è‚É£ V√©rification des fichiers de sch√©ma...');

    const sqliteSchema = path.join(prismaDir, 'schema.sqlite.prisma');
    const postgresqlSchema = path.join(prismaDir, 'schema.postgresql.prisma');

    if (!fs.existsSync(sqliteSchema)) {
        console.error('‚ùå schema.sqlite.prisma introuvable');
        return false;
    }

    if (!fs.existsSync(postgresqlSchema)) {
        console.error('‚ùå schema.postgresql.prisma introuvable');
        return false;
    }

    console.log('‚úÖ Fichiers de sch√©ma trouv√©s');

    // Test 2: V√©rifier le contenu des sch√©mas
    console.log('\n2Ô∏è‚É£ V√©rification du contenu des sch√©mas...');

    const sqliteContent = fs.readFileSync(sqliteSchema, 'utf8');
    const postgresqlContent = fs.readFileSync(postgresqlSchema, 'utf8');

    if (!sqliteContent.includes('provider = "sqlite"')) {
        console.error('‚ùå schema.sqlite.prisma ne contient pas provider = "sqlite"');
        return false;
    }

    if (!postgresqlContent.includes('provider = "postgresql"')) {
        console.error('‚ùå schema.postgresql.prisma ne contient pas provider = "postgresql"');
        return false;
    }

    console.log('‚úÖ Contenu des sch√©mas correct');

    // Test 3: Tester le basculement vers SQLite
    console.log('\n3Ô∏è‚É£ Test basculement vers SQLite...');

    const { execSync } = require('child_process');

    try {
        execSync('node scripts/switch-database.js sqlite', { stdio: 'pipe' });

        if (!fs.existsSync(schemaFile)) {
            console.error('‚ùå schema.prisma non cr√©√© apr√®s basculement SQLite');
            return false;
        }

        const currentContent = fs.readFileSync(schemaFile, 'utf8');
        if (!currentContent.includes('provider = "sqlite"')) {
            console.error('‚ùå schema.prisma ne contient pas provider = "sqlite"');
            return false;
        }

        console.log('‚úÖ Basculement vers SQLite r√©ussi');
    } catch (error) {
        console.error('‚ùå Erreur lors du basculement vers SQLite:', error.message);
        return false;
    }

    // Test 4: Tester le basculement vers PostgreSQL
    console.log('\n4Ô∏è‚É£ Test basculement vers PostgreSQL...');

    try {
        execSync('node scripts/switch-database.js postgresql', { stdio: 'pipe' });

        const currentContent = fs.readFileSync(schemaFile, 'utf8');
        if (!currentContent.includes('provider = "postgresql"')) {
            console.error('‚ùå schema.prisma ne contient pas provider = "postgresql"');
            return false;
        }

        console.log('‚úÖ Basculement vers PostgreSQL r√©ussi');
    } catch (error) {
        console.error('‚ùå Erreur lors du basculement vers PostgreSQL:', error.message);
        return false;
    }

    // Test 5: Remettre SQLite par d√©faut
    console.log('\n5Ô∏è‚É£ Remise en place de SQLite par d√©faut...');

    try {
        execSync('node scripts/switch-database.js sqlite', { stdio: 'pipe' });
        console.log('‚úÖ SQLite remis par d√©faut');
    } catch (error) {
        console.error('‚ùå Erreur lors de la remise en place de SQLite:', error.message);
        return false;
    }

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes :');
    console.log('1. Configurer votre fichier .env.local');
    console.log('2. Ex√©cuter : bun run db:generate');
    console.log('3. Ex√©cuter : bun run db:push (pour SQLite)');
    console.log('4. Tester votre application');

    return true;
}

// Ex√©cuter les tests
if (require.main === module) {
    const success = testDatabaseSwitch();
    process.exit(success ? 0 : 1);
}

module.exports = { testDatabaseSwitch };
