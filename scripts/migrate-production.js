#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ D√©marrage de la migration de production...');

// Fonction pour v√©rifier si la base de donn√©es est accessible
function isDatabaseAccessible() {
    try {
        // V√©rifier si DATABASE_URL est d√©finie
        if (!process.env.DATABASE_URL) {
            console.log('‚ö†Ô∏è  DATABASE_URL non d√©finie - Skip de la migration');
            return false;
        }

        // Test de connexion simple avec timeout
        console.log('üîç Test de connexion √† la base de donn√©es...');
        execSync('bun --bun prisma db execute --stdin', {
            input: 'SELECT 1;',
            stdio: 'pipe',
            timeout: 10000 // 10 secondes de timeout
        });
        return true;
    } catch (error) {
        console.log('‚ö†Ô∏è  Base de donn√©es non accessible - Skip de la migration:', error.message);
        return false;
    }
}

try {
    // 1. G√©n√©rer le client Prisma (toujours n√©cessaire)
    console.log('üì¶ G√©n√©ration du client Prisma...');
    execSync('bun --bun prisma generate', { stdio: 'inherit' });

    // 2. V√©rifier si on est en production
    const isProduction = process.env.NODE_ENV === 'production' || process.env.VERCEL === '1';

    // 3. V√©rifier si la base de donn√©es est accessible
    if (!isDatabaseAccessible()) {
        console.log('‚è≠Ô∏è  Migration ignor√©e - Base de donn√©es non accessible');
        console.log('‚úÖ Build peut continuer sans migration');
        process.exit(0);
    }

    // 4. Ex√©cuter la migration appropri√©e
    if (isProduction) {
        console.log('üåê Mode production d√©tect√© - Migration s√©curis√©e');
        // Utiliser db push sans --force-reset pour √©viter les probl√®mes
        execSync('bun --bun prisma db push --accept-data-loss', {
            stdio: 'inherit',
            timeout: 30000 // 30 secondes de timeout
        });
    } else {
        console.log('üîß Mode d√©veloppement - Migration normale');
        execSync('bun --bun prisma db push', {
            stdio: 'inherit',
            timeout: 30000 // 30 secondes de timeout
        });
    }

    console.log('‚úÖ Migration termin√©e avec succ√®s !');
} catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error.message);

    // En cas d'erreur, ne pas faire √©chouer le build
    if (isProduction) {
        console.log('‚ö†Ô∏è  En production, le build continue malgr√© l\'erreur de migration');
        console.log('üí° La migration pourra √™tre effectu√©e manuellement apr√®s le d√©ploiement');
        process.exit(0);
    } else {
        process.exit(1);
    }
}
