// This is your Prisma schema file for PostgreSQL,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Tables Auth.js (selon la documentation officielle)
model user {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean?
  image         String?
  accounts      account[]
  sessions      session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String? @db.Text
  access_token          String? @db.Text
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String? @db.Text
  session_state         String?
  user                  user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Tables Analytics
model pageView {
  id          Int      @id @default(autoincrement())
  pagePath    String
  userAgent   String?
  ipAddress   String?
  fingerprint String?
  country     String?
  city        String?
  timestamp   DateTime @default(now())
}

model uniqueVisitor {
  id          Int      @id @default(autoincrement())
  fingerprint String   @unique
  firstVisit  DateTime @default(now())
  lastVisit   DateTime @default(now())
  visitCount  Int      @default(1)
}

// Table pour tracker les tentatives de connexion Discord
model loginAttempt {
  id          Int      @id @default(autoincrement())
  discordId   String?  // ID Discord de l'utilisateur
  username    String?  // Nom d'utilisateur Discord
  email       String?  // Email Discord
  avatar      String?  // Avatar Discord
  ipAddress   String?
  userAgent   String?
  country     String?
  city        String?
  success     Boolean  // Si la connexion a réussi ou échoué
  reason      String?  // Raison de l'échec (ex: "Non autorisé")
  timestamp   DateTime @default(now())
}

// Tables pour le cache des artefacts Genshin Impact
model ArtifactSet {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  images      Json?    // Stockage des URLs d'images pour chaque type d'artefact
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("artifact_sets")
}

model ArtifactType {
  id        String   @id @default(cuid())
  name      String   @unique
  mainStats Json     // Array des stats principales possibles
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("artifact_types")
}

model SubStat {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("sub_stats")
}

model CacheMetadata {
  id           String   @id @default(cuid())
  key          String   @unique
  lastUpdated  DateTime
  version      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("cache_metadata")
}