#!/usr/bin/env node

/**
 * Script pour basculer entre SQLite et PostgreSQL
 * Usage: node scripts/switch-database.js [sqlite|postgresql]
 */

const fs = require('fs');
const path = require('path');

const databaseType = process.argv[2];

if (!databaseType || !['sqlite', 'postgresql'].includes(databaseType)) {
    console.error('‚ùå Usage: node scripts/switch-database.js [sqlite|postgresql]');
    process.exit(1);
}

const prismaDir = path.join(__dirname, '..', 'prisma');
const schemaFile = path.join(prismaDir, 'schema.prisma');
const sqliteSchema = path.join(prismaDir, 'schema.sqlite.prisma');
const postgresqlSchema = path.join(prismaDir, 'schema.postgresql.prisma');

try {
    // V√©rifier que les fichiers de sch√©ma existent
    if (!fs.existsSync(sqliteSchema)) {
        console.error('‚ùå Fichier schema.sqlite.prisma introuvable');
        process.exit(1);
    }

    if (!fs.existsSync(postgresqlSchema)) {
        console.error('‚ùå Fichier schema.postgresql.prisma introuvable');
        process.exit(1);
    }

    // Copier le bon sch√©ma
    const sourceSchema = databaseType === 'sqlite' ? sqliteSchema : postgresqlSchema;
    fs.copyFileSync(sourceSchema, schemaFile);

    console.log(`‚úÖ Sch√©ma ${databaseType} activ√©`);
    console.log(`üìÅ Fichier copi√©: ${sourceSchema} -> ${schemaFile}`);

    // Afficher les prochaines √©tapes
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Mettre √† jour votre fichier .env avec la bonne DATABASE_URL');
    console.log('2. Ex√©cuter: bun run db:generate');
    console.log('3. Ex√©cuter: bun run db:migrate (ou db:push pour SQLite)');

    if (databaseType === 'postgresql') {
        console.log('\nüîó Pour PostgreSQL sur Vercel:');
        console.log('- Cr√©er une base de donn√©es PostgreSQL sur Vercel');
        console.log('- Copier la DATABASE_URL de Vercel dans votre .env');
    }

} catch (error) {
    console.error('‚ùå Erreur lors du changement de sch√©ma:', error.message);
    process.exit(1);
}
